# Generated by Django 4.2.7 on 2025-09-19 03:13

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import users.models


def update_sample_users(apps, schema_editor):
    """Update existing sample users to new role structure"""
    User = apps.get_model('users', 'User')
    
    # Update existing staff users to receptionist
    User.objects.filter(username__in=['staff1', 'staff2', 'staff3']).update(role='receptionist')
    
    # Create new sample users with correct roles
    users_data = [
        {
            'username': 'admin1',
            'email': 'admin1@clinic.com',
            'first_name': 'Admin',
            'last_name': 'System',
            'role': 'admin',
            'phone': '0900000001',
            'is_active': True,
        },
        {
            'username': 'manager1',
            'email': 'manager1@clinic.com',
            'first_name': 'Nguyễn',
            'last_name': 'Thị Manager',
            'role': 'manager',
            'phone': '0900000002',
            'is_active': True,
        }
    ]
    
    for user_data in users_data:
        if not User.objects.filter(username=user_data['username']).exists():
            user = User.objects.create_user(
                username=user_data['username'],
                email=user_data['email'],
                first_name=user_data['first_name'],
                last_name=user_data['last_name'],
                role=user_data['role'],
                phone=user_data['phone'],
                is_active=user_data['is_active'],
                password='123456'  # Default password
            )


def reverse_update_sample_users(apps, schema_editor):
    """Reverse the user updates"""
    User = apps.get_model('users', 'User')
    User.objects.filter(username__in=['admin1', 'manager1']).delete()
    User.objects.filter(username__in=['staff1', 'staff2', 'staff3']).update(role='staff')


def update_receptionist_role(apps, schema_editor):
    """Update receptionist role to creceptionist"""
    User = apps.get_model('users', 'User')
    User.objects.filter(role='receptionist').update(role='creceptionist')


def reverse_update_receptionist_role(apps, schema_editor):
    """Reverse the role update"""
    User = apps.get_model('users', 'User')
    User.objects.filter(role='creceptionist').update(role='receptionist')

class Migration(migrations.Migration):

    replaces = [('users', '0001_initial'), ('users', '0003_user_avatar_user_bio_user_date_of_birth_user_gender'), ('users', '0004_alter_user_role'), ('users', '0005_auto_20250915_1003'), ('users', '0006_alter_user_role'), ('users', '0007_auto_20250915_1007')]

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Quản lý'), ('doctor', 'Bác sĩ'), ('receptionist', 'Nhân viên tư vấn & Lễ tân')], default='receptionist', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('specialization', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=users.models.user_avatar_upload_path)),
                ('bio', models.TextField(blank=True, help_text='Giới thiệu bản thân', null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Nam'), ('female', 'Nữ'), ('other', 'Khác')], max_length=10, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RunPython(
            code=update_sample_users,
            reverse_code=reverse_update_sample_users,
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(choices=[('admin', 'Admin'), ('manager', 'Quản lý'), ('doctor', 'Bác sĩ'), ('creceptionist', 'Nhân viên tư vấn & Lễ tân')], default='receptionist', max_length=20),
        ),
        migrations.RunPython(
            code=update_receptionist_role,
            reverse_code=reverse_update_receptionist_role,
        ),
    ]
